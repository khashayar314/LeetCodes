class Solution(object):
    def change(self, amount, coins):
        """
        :type amount: int
        :type coins: List[int]
        :rtype: int
        """
        if amount == 0:
            return 1 
        if coins == []:
            return 0

        coins.sort()
        answer = []
        for i in range(len(coins)):        
            answer.append([1])
            for j in range(1, amount+1):
                total = 0
                if i == 0:
                    if j%coins[i] == 0:
                        total += 1
                    answer[i].append(total)
                    continue
                    
                for k in range(1+j//coins[i]):
                    total += answer[i-1][j-k*coins[i]]
                answer[i].append(total)
        #print("hailo", answer)
        return answer[-1][-1]
            
        # this is too slow
        #return self.helper(amount, coins, 0)
        
    def helper(self, amount, coins, smallest_ind):
        #print("let's see amount and coins and smallest ind", amount, coins, smallest_ind)
        if amount == 0:
            return 1
        elif smallest_ind >= len(coins) or coins[-1] > amount:
            return 0
        answer = 0
        i = 0
        while i*coins[smallest_ind] <= amount:
            new_amount = amount-i*coins[smallest_ind]
            answer += self.helper(new_amount, coins, smallest_ind+1)
            i += 1
        return answer

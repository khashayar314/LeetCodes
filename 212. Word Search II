class Trie(object):
    
    def __init__(self):
        self.dict = {}
        self.starting_dict = {}
        
    def insert(self, word):
        if word in self.dict:
            self.dict[word] += 1
            for i in range(len(word)):
                self.starting_dict[word[ : i+1]] += 1            
        else:
            self.dict[word] = 1
            for i in range(len(word)):
                if word[ :i+1] in self.starting_dict:
                    self.starting_dict[word[ : i+1]] += 1
                else:
                    self.starting_dict[word[ : i+1]] = 1
        
    def search(self, word):
        if word in self.dict:
            return True
        else:
            return False
        
    def startsWith(self, prefix):
        if prefix in self.starting_dict:
            return True
        else:
            return False
        
    def delete(self, word):
        if word in self.dict:
            self.dict[word] -= 1
            if self.dict[word] == 0:
                self.dict.pop(word)
            for i in range(len(word)):
                self.starting_dict[word[ :i+1]] -= 1
                if self.starting_dict[word[ :i+1]] == 0:
                    self.starting_dict.pop(word[ :i+1])
                    

class Solution(object):
    def findWords(self, board, words):
        """
        :type board: List[List[str]]
        :type words: List[str]
        :rtype: List[str]
        """
        trie = Trie()
        for word in words:
            trie.insert(word)
        #print("fucker", trie.starting_dict)
        #trie.delete("oath")
        #print(trie.startsWith("o"))

        
        answer = []
        for i in range(len(board)):
            for j in range(len(board[0])):

                self.Backtrack(board, '', i, j, trie, answer)
        return answer
        
    def Backtrack(self, board, current, i, j, trie, answer):
        temp = board[i][j]
        board[i][j] = '0' # some character not in board
        current += temp
        if trie.search(current):
            answer.append(current)
            trie.delete(current)
        if not trie.startsWith(current):
            board[i][j] = temp
            return
        m = len(board)
        n = len(board[0])
        for pair in self.nbs(m, n, i, j):
            self.Backtrack(board, current, pair[0], pair[1], trie, answer)
        board[i][j] = temp
        
    def nbs(self, m, n, i, j):
        ind = []
        if i > 0:
            ind.append([i-1, j])
        if j > 0:
            ind.append([i, j-1])
        if i < m-1:
            ind.append([i+1, j])
        if j < n-1:
            ind.append([i, j+1])
        return ind        
        
#############################################################
              
    def slow_solution(self, board, words): # works on 34 of 36 cases.    
        board_dict = {}
        for i in range(len(board)):
            for j in range(len(board[0])):
                letter = board[i][j]
                if letter not in board_dict:
                    board_dict[letter] = []
                board_dict[letter].append([i, j])
                
        answer = []
        for word in words:
            if word[0] not in board_dict:
                continue
            possibilities = board_dict[word[0]]
            found = False
            for pair in possibilities:
                if self.word_finder(board, pair[0], pair[1], word, 0):
                    found = True
                    break
            if found:
                answer.append(word)
        return answer             
        
    def word_finder(self, board, i, j, word, k):
        if k >= len(word):
            return True
        if word[k] != board[i][j]:
            return
        m = len(board)
        n = len(board[0])
        if self.nbs(m, n, i, j) == [] and k == len(word)-1: # if board is 1 by 1
            return True 
        board[i][j] = '0' #some letter not in the board
        answer = False
        
        for pair in self.nbs(m, n, i, j):
            if self.word_finder(board, pair[0], pair[1], word, k+1):
                answer = True
                break
                
        board[i][j] = word[k]
        return answer
        

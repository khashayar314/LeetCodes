# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution(object):
    def countNodes(self, root):
        """
        :type root: TreeNode
        :rtype: int
        """
        if root == None:
            return 0
        depth = 0
        node = root
        while node != None:
            node = node.left
            depth += 1
        
        #print(self.corresponding_leaf(root, 0, depth))
        start = 0
        end = 2**(depth-1)-1
        while end-start > 1:
            mid = start+(end-start)//2
            if self.corresponding_leaf(root, mid, depth):
                end = mid
            else:
                start = mid
        if self.corresponding_leaf(root, start, depth):
            return 2**depth-start-1
        else:
            return 2**depth-start-2
            
        
    def corresponding_leaf(self, root, num, depth):
        node = root
        for i in range(depth-2, -1, -1):
            if num >= 2**i:
                node = node.left
                num -= 2**i
            else:
                node = node.right
        return node

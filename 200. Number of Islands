class node():
    def __init__(self, name):
        node.name = name
        node.children = set()
        node.counted = 0
        

class Solution(object):
    def numIslands(self, grid):
        """
        :type grid: List[List[str]]
        :rtype: int
        """
        counter = 0
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if grid[i][j] != "0":
                    #print("see", i, j)
                    counter += 1
                    grid = Solution.DFS(self, grid, i, j)
        
        
        return counter
        
        
    def DFS(self, grid, i, j):
        grid[i][j] = "2"
        if i > 0 and grid[i-1][j] == "1":
            grid = Solution.DFS(self, grid, i-1, j)
        if i < len(grid)-1 and grid[i+1][j] == "1":
            grid = Solution.DFS(self, grid, i+1, j)
        if j > 0 and grid[i][j-1] == "1":
            grid = Solution.DFS(self, grid, i, j-1)
        if j < len(grid[0])-1 and grid[i][j+1] == "1":
            grid = Solution.DFS(self, grid, i, j+1)
        grid[i][j] = "0"
        return grid

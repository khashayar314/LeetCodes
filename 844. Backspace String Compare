class Solution(object):
    def backspaceCompare(self, S, T):
        """
        :type S: str
        :type T: str
        :rtype: bool
        """
        i = len(S) - 1
        j = len(T) - 1
        while i >= 0 and j >= 0:
            if S[i] != "#" and T[j]!= "#":
                if S[i] != T[j]:
                    return False
                i -= 1
                j -= 1
            elif S[i] == "#":
                S_counter = 1
                i -= 1
                while S_counter > 0 and i >=0:
                    if S[i] == "#":
                        S_counter += 1
                    else:
                        S_counter -= 1
                    i -= 1
            elif T[j] == "#":
                T_counter = 1
                j -= 1
                while T_counter > 0 and j >=0:
                    if T[j] == "#":
                        T_counter += 1
                    else:
                        T_counter -= 1
                    j -= 1

        
        if i < 0 or j < 0:
            if i < 0 and j >= 0:
                found = False
                for k in range(j+1):
                    if T[j] != "#":
                        found = True
                return not found
            if j < 0 and i >= 0:
                found = False
                for k in range(i+1):
                    if S[i] != "#":
                        found = True
                return not found            
            
        return True
                
        
    def withonspace(self, S, T):
        newS = ''
        for char in S:
            if char != "#":
                newS += char
            else:
                k = len(newS)
                newS = newS[ :k-1]

        newT = ''
        for char in T:
            if char != "#":
                newT += char
            else:
                k = len(newT)
                newT = newT[ :k-1]
                
        return newS == newT

                
        
        

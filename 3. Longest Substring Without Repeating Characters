class Solution(object):
    def lengthOfLongestSubstring(self, s):
        """
        :type s: str
        :rtype: int
        """
        #return Solution.helper(self, s, len(s))[0] 
        return Solution.oldsolution(self, s)
        
        
    def helper(self, s, length):
        if length < 1:
            return [0, 0]
        [a, b] = Solution.helper(self, s, length-1)
        i = 2
        while length-i >= b and s[length-1] != s[length-i]:
            i += 1
        b = length-i+1
        return [max(a, length-b), b]
        
    
        
    def oldsolution(self, s):
        if s == "":
            return 0
        maximum = 1
        i = -1
        j = 0
        while i < len( s ) - 1:
            i += 1
            repeated = False
            while j < len( s ) - 1:
                j += 1
                #print("here are i and j", i , j)
                for k in range( i , j ):
                    if s[ j ] == s[ k ]:
                        #print("found repeated s[j] and s[ k ]", s[ j ], s[ k ] , j , k)
                        repeated = True
                        break
                if repeated:        
                    if j - i > maximum:
                        maximum = j - i
                        #print("j-i is bigger than max", i , j , s[ i ] , s[ j ])
                    i = k
                    #print("i close my eyes", i)
                    break
                if j == len( s ) - 1:
                    if j - i + 1 > maximum:
                        maximum = j - i + 1
                    break
                        
                
        return maximum
        

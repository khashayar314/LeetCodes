class Solution(object):
    def intervalIntersection(self, A, B):
        """
        :type A: List[List[int]]
        :type B: List[List[int]]
        :rtype: List[List[int]]
        """
        output = []
        inside = False
        i = 0
        j = 0
        while i < len(A) and j < len(B):
            new_interval = self.Intersection(A[i], B[j])
            if new_interval:
                output.append(new_interval)
            if A[i][1] < B[j][1]:
                i += 1
            elif A[i][1] > B[j][1]:
                j +=1
            else:
                i += 1
                j += 1
        return output
                
                
    def Intersection(self, first_interval, second_interval):

        start = max(first_interval[0], second_interval[0])
        end = min(first_interval[1], second_interval[1])
        if end < start:
            return
        return [start, end]
